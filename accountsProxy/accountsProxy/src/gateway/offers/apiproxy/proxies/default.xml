<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">

    <Description/>
    #proxyDefaultFaultRule#
    <FaultRules>
    	#genericUnhandledExceptionFaultRule#
        #commonAccessTokenFaultRules#
        #commonTraficManagementFaultRules#
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Name>KVM-GetTargetConfigurations</Name>
            </Step>
            #commonProxyPreflowRequest#
		</Request>
        <Response/>
    </PreFlow>
    <Flows>
        #pingResourceFlow#
        <Flow name="GetApplicableBroadbandSpeeds">
            <Request>
                <Step>
                    <Name>AM-RequiredChannelParamMissing</Name>
                    <Condition>(request.queryparam.channel = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetApplicableBroadbandSpeeds</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/broadband") and (request.verb = "GET")
            </Condition>
        </Flow>
         <Flow name="GetApplicableBundles">
            <Request>
                <Step>
                    <Name>AM-RequiredChannelParamMissing</Name>
                    <Condition>(request.queryparam.channel = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-RequiredDowngradeFlagMissing</Name>
                    <Condition>(request.queryparam.downgrade_flag = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-RequiredRateplanMissing</Name>
                    <Condition>(request.queryparam.rate_plan = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetApplicableBundles</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/bundles") and (request.verb = "GET")
            </Condition>
        </Flow>
        <Flow name="GetApplicableRateplan">
            <Request>
                <Step>
                    <Name>AM-RequiredChannelParamMissing</Name>
                    <Condition>(request.queryparam.channel = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-RequiredCurrentRateplanParamMissing</Name>
                    <Condition>(request.queryparam.current_rate_plan = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetApplicableRateplan</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/rate-plans") and (request.verb = "GET")
            </Condition>
        </Flow>
         <Flow name="GetAvailableOffers">
            <Request>
                <Step>
                    <Name>AM-RequiredOffertypeParamMissing</Name>
                    <Condition>(request.queryparam.offer_type = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetAvailableOffers</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(request.verb = "GET" and proxy.pathsuffix JavaRegex "(/?)$")
            </Condition>
        </Flow>
        <Flow name="GetContractOffers">
            <Request>
                <Step>
                    <Name>AM-RequiredContractIdParamMissing</Name>
                     <Condition>(request.queryparam.contract_id = null)</Condition>
                </Step>
                <Step>
                    <Name>JSC-ValidateContractid</Name>
                    <Condition>(du.config.isGetContractOffersFlag = "true")</Condition>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetContractOffers</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/contracts") and (request.verb = "GET")
            </Condition>
        </Flow>
         <Flow name="GetEligibleBundles">
            <Request>
                 <Step>
                    <Name>EV-ExtractMSISDN</Name>
                </Step>
                <Step>
                    <Name>JSC-ValidateMsisdn</Name>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetEligibleBundles</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/{msisdn}/bundles") and (request.verb = "GET")
            </Condition>
        </Flow>
        <Flow name="GetEligibleContractOffers">
            <Request>
                <Step>
                    <Name>AM-RequiredChannelParamMissing</Name>
                    <Condition>(request.queryparam.channel = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-RequiredContractIdParamMissing</Name>
                    <Condition>(request.queryparam.contract_id = null)</Condition>
                </Step>
                <Step>
                    <Name>JSC-ValidateContractid</Name>
                    <Condition>(du.config.isGetEligibleContractOffersFlag = "true")</Condition>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetEligibleContractOffers</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/contracts/eligible") and (request.verb = "GET")
            </Condition>
        </Flow>
		
		<!-- GetProductHandsetOffersHistory soap service to restful api|| Start -->
		<Flow name="GetProductHandsetOffersHistory">
		<Description>Get Product Handset Offers History for offers</Description>
            <Request>
				<Step>
                    <Name>AM-RequiredContractCodeMissing</Name>
                    <Condition>(request.queryparam.contract_code = null)</Condition>
                </Step>			
                <Step>
                    <Name>AM-BuildPayloadGetProductHandsetOffersHistory</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/product/handsethistory") and (request.verb = "GET")
            </Condition>
        </Flow>
		<!-- GetProductHandsetOffersHistory soap service to restful api|| End-->
		
        <Flow name="GetTVPackages">
            <Request>
                <Step>
                    <Name>AM-RequiredAccountIdParamMissing</Name>
                    <Condition>(request.queryparam.account_id = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-RequiredContractIdParamMissing</Name>
                    <Condition>(request.queryparam.contract_id = null)</Condition>
                </Step>
                <Step>
                    <Name>JSC-ValidateContractid</Name>
                    <Condition>(du.config.isGetTVPackagesFlag = "true")</Condition>
                </Step>
                <Step>
                    <Name>AM-RequiredSourceSytemParamMissing</Name>
                    <Condition>(request.queryparam.source_system = null)</Condition>
                </Step>
                <Step>
                    <Name>AM-SOAPPayloadGetTVPackages</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix Matches "/tv-packages") and (request.verb = "GET")
            </Condition>
        </Flow>
        #unknownResourceFlowGeneric#
        
    </Flows>
    <PostFlow name="PostFlow">
        <Response>
        #commonProxyPostflowResponse#
        </Response>
    </PostFlow>
    
    <HTTPProxyConnection>
        <BasePath>/v1/offers</BasePath>
        <Properties/>
        <VirtualHost>default</VirtualHost>
        <!-- Comment/Remove the Virtual Host-secure while deploying API Proxy in Organization dudev -->
        <VirtualHost>default</VirtualHost>
    </HTTPProxyConnection>
    #pingResourceRouteRule#
   <RouteRule name="mock">
        <TargetEndpoint>mock</TargetEndpoint>
        <Condition>(du.config.request.mock="true")</Condition>
    </RouteRule>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>